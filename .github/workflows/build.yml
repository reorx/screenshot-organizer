name: Build and Package App

on:
  push:
    branches: [ master, develop ]
    tags: [ '**' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          .build
          *.xcodeproj/project.xcworkspace/xcshareddata/swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift', 'Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build app
      run: |
        # Build the main app first
        xcodebuild -project ScreenshotOrganizer.xcodeproj \
                   -scheme ScreenshotOrganizer \
                   -configuration Release \
                   -derivedDataPath build \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO \
                   build
        
        # Build the launcher app
        xcodebuild -project ScreenshotOrganizer.xcodeproj \
                   -scheme ScreenshotOrganizerLauncher \
                   -configuration Release \
                   -derivedDataPath build \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO \
                   build
    
    - name: Package app
      run: |
        # List what was built for debugging
        echo "Built products:"
        ls -la build/Build/Products/Release/
        
        # Create release directory
        mkdir -p release
        
        # Copy the main app (which should contain the launcher)
        cp -R build/Build/Products/Release/ScreenshotOrganizer.app release/
        
        # Verify the app structure
        echo "App structure:"
        find release/ScreenshotOrganizer.app -type d -name "*Launcher*" || echo "No launcher directory found"
        
        # Determine the artifact name based on whether this is a tag or not
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          ARTIFACT_NAME="ScreenshotOrganizer-${{ github.ref_name }}"
          echo "Tagged release artifact will be: $ARTIFACT_NAME"
        else
          ARTIFACT_NAME="ScreenshotOrganizer-${{ github.sha }}"
          echo "Development artifact will be: $ARTIFACT_NAME"
        fi
        
        # Create dir with the determined name
        mkdir "$ARTIFACT_NAME"
        
        # move app to the artifact dir
        mv "release/ScreenshotOrganizer.app" "$ARTIFACT_NAME"
        
        # Show final dir info
        ls -ld "$ARTIFACT_NAME"
        
        # Store the artifact name for later steps
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.ref_type == 'tag' && format('ScreenshotOrganizer-{0}', github.ref_name) || format('ScreenshotOrganizer-{0}', github.sha) }}
        path: ${{ env.ARTIFACT_NAME }}
        retention-days: 30
    
    - name: Create asset for release (on tag)
      if: github.ref_type == 'tag'
      run: |
        # Create zip file for release asset
        zip -r "$ARTIFACT_NAME.zip" "$ARTIFACT_NAME"
    
    - name: Create release (on tag)
      if: github.ref_type == 'tag'
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ env.ARTIFACT_NAME }}.zip
        #draft: false
        #prerelease: false
        generate_release_notes: true
